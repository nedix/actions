name: Update package

inputs:
  build_arguments:
    description: List of build arguments.
    required: true
  context:
    description: Path pointing to a set of files.
    required: true
  file:
    description: Name of the Containerfile(Dockerfile).
    required: true
  platforms:
    description: Comma-separated list of container architectures.
    required: true
  registry:
    description: Name of the package registry.
    required: true
  registry_path:
    description: Path on the registry where to push the package.
    required: true
  registry_username:
    description: Username for the package registry
    required: true
  registry_password:
    description: Password for the package registry
    required: true
  tags:
    description: List of tags.
    required: true
  target:
    description: Build target.
    required: true
  enable_cache:
    description: Enable package cache.
    required: true
  enable_latest_tag:
    description: Enable the latest package tag.
    required: true
  enable_short_sha_tag:
    description: Enable the short sha package tag.
    required: true
  enable_version_tag:
    description: Enable the semver package tag.
    required: true

runs:
  using: composite
  steps:
    - id: registry-login
      name: Login to package registry
      uses: docker/login-action@v3.5.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - id: cache-registry-login
      name: Login to cache package registry
      uses: docker/login-action@v3.5.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - id: setup-qemu
      name: Setup QEMU
      uses: docker/setup-qemu-action@v3.6.0

    - id: setup-buildx
      name: Setup Buildx
      uses: docker/setup-buildx-action@v3.11.1

    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v5.0.0
      with:
        fetch-depth: 0
        ref: ${{ github.event.repository.default_branch }}

    - if: inputs.file == 'auto'
      id: find-containerfile
      name: Find containerfile
      shell: sh
      run: |
        cd "${{ inputs.context }}"
        test -f Containerfile && echo "file=Containerfile" >> $GITHUB_OUTPUT && exit 0
        test -f Dockerfile && echo "file=Dockerfile" >> $GITHUB_OUTPUT && exit 0
        echo "Failed to find a containerfile within the given context path." && echo "file=none" >> $GITHUB_OUTPUT

    - id: prepare-tags
      name: Prepare tags
      shell: bash
      run: |
        echo "latest_tag=${{ inputs.registry }}/${{ inputs.registry_path }}:latest" >> $GITHUB_OUTPUT
        echo "short_sha_tag=${{ inputs.registry }}/${{ inputs.registry_path }}:$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
        echo "version_tag=${{ inputs.registry }}/${{ inputs.registry_path }}:$(git tag --points-at HEAD)" >> $GITHUB_OUTPUT
        tags=""
        for tag in "${{ inputs.tags }}"; do
          tags+="${{ inputs.registry }}/${{ inputs.registry_path }}:${tag}\n"
        done
        test -n "$tags" && echo -e "tags=${tags}" || echo -e "tags=\"\"" >> $GITHUB_OUTPUT

    - if: inputs.file != 'auto' || steps.find-containerfile.outputs.file != 'none'
      id: build-and-push
      name: Build and push
      uses: docker/build-push-action@v6.18.0
      with:
        build-args: ${{ inputs.build_arguments }}
#        cache-from: ${{ inputs.enable_cache == 'true' && format('{0}={1}/{2}:{3}', 'type=registry,ref', 'ghcr.io', github.repository, 'cache') || null }}
#        cache-to: ${{ inputs.enable_cache == 'true' && format('{0}={1}/{2}:{3},{4}', 'type=registry,ref', 'ghcr.io', github.repository, 'cache', 'mode=max') || null }}
        context: ${{ inputs.context }}
        file: ${{ inputs.file == 'auto' && steps.find-containerfile.outputs.file || inputs.file }}
        platforms: ${{ inputs.platforms }}
        push: true
        tags: |
          ${{ inputs.enable_latest_tag == 'true' && steps.prepare-tags.outputs.latest_tag || '' }}
          ${{ inputs.enable_short_sha_tag == 'true' && steps.prepare-tags.outputs.short_sha_tag || '' }}
          ${{ inputs.enable_version_tag == 'true' && steps.prepare-tags.outputs.version_tag || '' }}
          ${{ steps.prepare-tags.outputs.tags }}
        target: ${{ inputs.target }}

    - if: inputs.registry == 'docker.io' && steps.build-and-push.conclusion == 'success'
      id: extract-sbom
      name: Extract SBOM
      uses: docker/scout-action@v1.18.2
      with:
        command: cves,sbom
        format: spdx
        image: "${{ format('{0}/{1}@{2}', inputs.registry, inputs.registry_path, steps.build-and-push.outputs.digest) }}"
        output: sbom.spdx.json
        sarif-file: sarif.output.json

    - if: steps.extract-sbom.conclusion == 'success'
      id: attest-sbom
      name: Attest SBOM
      uses: actions/attest-sbom@v3.0.0
      with:
        sbom-path: sbom.spdx.json
        subject-path: ${{ github.workspace }}
      continue-on-error: true

    - if: steps.extract-sbom.conclusion == 'success'
      id: upload-sarif
      name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3.30.3
      with:
        sarif_file: sarif.output.json
      continue-on-error: true
