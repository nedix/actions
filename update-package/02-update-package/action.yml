name: Update package

inputs:
  context:
    description: Path pointing to a set of files.
    default: '.'
  file:
    description: Name of the Containerfile(Dockerfile).
    default: 'auto'
  platforms:
    description: Comma-separated list of platform architectures.
    required: true
  registry:
    description: Name of the package registry.
    required: true
  registry_path:
    description: Path on the registry where to push the package.
    required: true
  registry_username:
    description: Username for the package registry
    required: true
  registry_password:
    description: Password for the package registry
    required: true
  tags:
    description: List of tags.
    required: true
  enable_short_sha:
    description: Enable the short sha package tag.
    default: 'true'
  enable_version_tag:
    description: Enable the semver package tag.
    default: 'true'
  enable_latest_tag:
    description: Enable the latest package tag.
    default: 'true'

runs:
  using: composite
  steps:
    - id: registry-login
      name: Login to package registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - id: setup-qemu
      name: Setup QEMU
      uses: docker/setup-qemu-action@v3

    - id: setup-buildx
      name: Setup Buildx
      uses: docker/setup-buildx-action@v3

    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
        ref: ${{ github.event.repository.default_branch }}

    - id: prepare-tags
      name: Prepare tags
      shell: sh
      run: |
        echo "short_sha=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
        echo "version_tag=$(git tag --points-at HEAD)" >> $GITHUB_OUTPUT

    - if: inputs.file == 'auto'
      id: find-containerfile
      name: Find containerfile
      shell: sh
      run: |
        cd "${{ inputs.context }}"
        test -f Containerfile && echo "file=Containerfile" >> $GITHUB_OUTPUT && exit 0
        test -f Dockerfile && echo "file=Dockerfile" >> $GITHUB_OUTPUT && exit 0
        echo "Failed to find a containerfile within the given context path."
        exit 1

    - id: build-and-push
      name: Build and push
      uses: docker/build-push-action@v6
      with:
        cache-from: |
          type=registry,ref=${{ format('{0}/{1}/{2}:{3}', 'ghcr.io', 'nedix/actions', github.repository, 'cache') }}
        cache-to: |
          type=registry,ref=${{ format('{0}/{1}/{2}:{3}', 'ghcr.io', 'nedix/actions', github.repository, 'cache') }},mode=max
        context: ${{ inputs.context }}
        file: ${{ inputs.file == 'auto' && steps.find-containerfile.outputs.file || inputs.file }}
        platforms: ${{ inputs.platforms }}
        provenance: mode=max
        push: true
        sbom: true
        tags: |
          ${{ inputs.enable_latest_tag == 'true' && format('{0}/{1}:{2}', inputs.registry, inputs.registry_path, 'latest') }}
          ${{ inputs.enable_short_sha == 'true' && format('{0}/{1}:{2}', inputs.registry, inputs.registry_path, steps.prepare-tags.outputs.short_sha) }}
          ${{ inputs.enable_version_tag == 'true' && format('{0}/{1}:{2}', inputs.registry, inputs.registry_path, steps.prepare-tags.outputs.version_tag) }}
          ${{ inputs.tags }}
